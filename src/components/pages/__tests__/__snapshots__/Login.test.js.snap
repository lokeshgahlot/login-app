// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LoginPage /> redirects 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginPage
    isAuthenticated={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "push": false,
      "to": Object {
        "pathname": "/greeting",
        "state": Object {
          "from": undefined,
        },
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "push": false,
        "to": Object {
          "pathname": "/greeting",
          "state": Object {
            "from": undefined,
          },
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<LoginPage /> renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginPage
    isAuthenticated={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <form
        className="form"
        onSubmit={[Function]}
      >
        <FormGroup
          bsClass="form-group"
          bsSize="large"
          controlId="email"
        >
          <ControlLabel
            bsClass="control-label"
            srOnly={false}
          >
            Email
          </ControlLabel>
          <WithInputVaildator
            message="Invalid email"
            pattern="^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$"
            type="email"
          >
            <FormControl
              autoFocus={true}
              bsClass="form-control"
              componentClass="input"
              onChange={[Function]}
              required={true}
              type="email"
              value=""
            />
          </WithInputVaildator>
        </FormGroup>
        <FormGroup
          bsClass="form-group"
          bsSize="large"
          controlId="password"
        >
          <ControlLabel
            bsClass="control-label"
            srOnly={false}
          >
            Password
          </ControlLabel>
          <FormControl
            bsClass="form-control"
            componentClass="input"
            onChange={[Function]}
            type="password"
            value=""
          />
        </FormGroup>
        <ButtonToolbar
          bsClass="btn-toolbar"
          className="pull-right"
        >
          <Link
            replace={false}
            to={
              Object {
                "pathname": "/sign-up",
              }
            }
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsSize="large"
              bsStyle="default"
              disabled={false}
            >
               Register 
            </Button>
          </Link>
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsSize="large"
            bsStyle="primary"
            disabled={true}
            type="submit"
          >
            Login
          </Button>
        </ButtonToolbar>
      </form>,
      "className": "login top-buffer",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <FormGroup
            bsClass="form-group"
            bsSize="large"
            controlId="email"
          >
            <ControlLabel
              bsClass="control-label"
              srOnly={false}
            >
              Email
            </ControlLabel>
            <WithInputVaildator
              message="Invalid email"
              pattern="^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$"
              type="email"
            >
              <FormControl
                autoFocus={true}
                bsClass="form-control"
                componentClass="input"
                onChange={[Function]}
                required={true}
                type="email"
                value=""
              />
            </WithInputVaildator>
          </FormGroup>,
          <FormGroup
            bsClass="form-group"
            bsSize="large"
            controlId="password"
          >
            <ControlLabel
              bsClass="control-label"
              srOnly={false}
            >
              Password
            </ControlLabel>
            <FormControl
              bsClass="form-control"
              componentClass="input"
              onChange={[Function]}
              type="password"
              value=""
            />
          </FormGroup>,
          <ButtonToolbar
            bsClass="btn-toolbar"
            className="pull-right"
          >
            <Link
              replace={false}
              to={
                Object {
                  "pathname": "/sign-up",
                }
              }
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsSize="large"
                bsStyle="default"
                disabled={false}
              >
                 Register 
              </Button>
            </Link>
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsSize="large"
              bsStyle="primary"
              disabled={true}
              type="submit"
            >
              Login
            </Button>
          </ButtonToolbar>,
        ],
        "className": "form",
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "form-group",
            "bsSize": "large",
            "children": Array [
              <ControlLabel
                bsClass="control-label"
                srOnly={false}
              >
                Email
              </ControlLabel>,
              <WithInputVaildator
                message="Invalid email"
                pattern="^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$"
                type="email"
              >
                <FormControl
                  autoFocus={true}
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  required={true}
                  type="email"
                  value=""
                />
              </WithInputVaildator>,
            ],
            "controlId": "email",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "control-label",
                "children": "Email",
                "srOnly": false,
              },
              "ref": null,
              "rendered": "Email",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <FormControl
                  autoFocus={true}
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  required={true}
                  type="email"
                  value=""
                />,
                "message": "Invalid email",
                "pattern": "^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$",
                "type": "email",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "autoFocus": true,
                  "bsClass": "form-control",
                  "componentClass": "input",
                  "onChange": [Function],
                  "required": true,
                  "type": "email",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "form-group",
            "bsSize": "large",
            "children": Array [
              <ControlLabel
                bsClass="control-label"
                srOnly={false}
              >
                Password
              </ControlLabel>,
              <FormControl
                bsClass="form-control"
                componentClass="input"
                onChange={[Function]}
                type="password"
                value=""
              />,
            ],
            "controlId": "password",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "control-label",
                "children": "Password",
                "srOnly": false,
              },
              "ref": null,
              "rendered": "Password",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "form-control",
                "componentClass": "input",
                "onChange": [Function],
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "btn-toolbar",
            "children": Array [
              <Link
                replace={false}
                to={
                  Object {
                    "pathname": "/sign-up",
                  }
                }
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsSize="large"
                  bsStyle="default"
                  disabled={false}
                >
                   Register 
                </Button>
              </Link>,
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsSize="large"
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                Login
              </Button>,
            ],
            "className": "pull-right",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsSize="large"
                  bsStyle="default"
                  disabled={false}
                >
                   Register 
                </Button>,
                "replace": false,
                "to": Object {
                  "pathname": "/sign-up",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": false,
                  "bsClass": "btn",
                  "bsSize": "large",
                  "bsStyle": "default",
                  "children": " Register ",
                  "disabled": false,
                },
                "ref": null,
                "rendered": " Register ",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": false,
                "bsClass": "btn",
                "bsSize": "large",
                "bsStyle": "primary",
                "children": "Login",
                "disabled": true,
                "type": "submit",
              },
              "ref": null,
              "rendered": "Login",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "form",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <form
          className="form"
          onSubmit={[Function]}
        >
          <FormGroup
            bsClass="form-group"
            bsSize="large"
            controlId="email"
          >
            <ControlLabel
              bsClass="control-label"
              srOnly={false}
            >
              Email
            </ControlLabel>
            <WithInputVaildator
              message="Invalid email"
              pattern="^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$"
              type="email"
            >
              <FormControl
                autoFocus={true}
                bsClass="form-control"
                componentClass="input"
                onChange={[Function]}
                required={true}
                type="email"
                value=""
              />
            </WithInputVaildator>
          </FormGroup>
          <FormGroup
            bsClass="form-group"
            bsSize="large"
            controlId="password"
          >
            <ControlLabel
              bsClass="control-label"
              srOnly={false}
            >
              Password
            </ControlLabel>
            <FormControl
              bsClass="form-control"
              componentClass="input"
              onChange={[Function]}
              type="password"
              value=""
            />
          </FormGroup>
          <ButtonToolbar
            bsClass="btn-toolbar"
            className="pull-right"
          >
            <Link
              replace={false}
              to={
                Object {
                  "pathname": "/sign-up",
                }
              }
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsSize="large"
                bsStyle="default"
                disabled={false}
              >
                 Register 
              </Button>
            </Link>
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsSize="large"
              bsStyle="primary"
              disabled={true}
              type="submit"
            >
              Login
            </Button>
          </ButtonToolbar>
        </form>,
        "className": "login top-buffer",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <FormGroup
              bsClass="form-group"
              bsSize="large"
              controlId="email"
            >
              <ControlLabel
                bsClass="control-label"
                srOnly={false}
              >
                Email
              </ControlLabel>
              <WithInputVaildator
                message="Invalid email"
                pattern="^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$"
                type="email"
              >
                <FormControl
                  autoFocus={true}
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  required={true}
                  type="email"
                  value=""
                />
              </WithInputVaildator>
            </FormGroup>,
            <FormGroup
              bsClass="form-group"
              bsSize="large"
              controlId="password"
            >
              <ControlLabel
                bsClass="control-label"
                srOnly={false}
              >
                Password
              </ControlLabel>
              <FormControl
                bsClass="form-control"
                componentClass="input"
                onChange={[Function]}
                type="password"
                value=""
              />
            </FormGroup>,
            <ButtonToolbar
              bsClass="btn-toolbar"
              className="pull-right"
            >
              <Link
                replace={false}
                to={
                  Object {
                    "pathname": "/sign-up",
                  }
                }
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsSize="large"
                  bsStyle="default"
                  disabled={false}
                >
                   Register 
                </Button>
              </Link>
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsSize="large"
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                Login
              </Button>
            </ButtonToolbar>,
          ],
          "className": "form",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "form-group",
              "bsSize": "large",
              "children": Array [
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Email
                </ControlLabel>,
                <WithInputVaildator
                  message="Invalid email"
                  pattern="^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$"
                  type="email"
                >
                  <FormControl
                    autoFocus={true}
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    required={true}
                    type="email"
                    value=""
                  />
                </WithInputVaildator>,
              ],
              "controlId": "email",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "control-label",
                  "children": "Email",
                  "srOnly": false,
                },
                "ref": null,
                "rendered": "Email",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <FormControl
                    autoFocus={true}
                    bsClass="form-control"
                    componentClass="input"
                    onChange={[Function]}
                    required={true}
                    type="email"
                    value=""
                  />,
                  "message": "Invalid email",
                  "pattern": "^([\\\\w.%+-]+)@([\\\\w-]+\\\\.)+([\\\\w]{2,})$",
                  "type": "email",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "autoFocus": true,
                    "bsClass": "form-control",
                    "componentClass": "input",
                    "onChange": [Function],
                    "required": true,
                    "type": "email",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "form-group",
              "bsSize": "large",
              "children": Array [
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Password
                </ControlLabel>,
                <FormControl
                  bsClass="form-control"
                  componentClass="input"
                  onChange={[Function]}
                  type="password"
                  value=""
                />,
              ],
              "controlId": "password",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "control-label",
                  "children": "Password",
                  "srOnly": false,
                },
                "ref": null,
                "rendered": "Password",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "form-control",
                  "componentClass": "input",
                  "onChange": [Function],
                  "type": "password",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "btn-toolbar",
              "children": Array [
                <Link
                  replace={false}
                  to={
                    Object {
                      "pathname": "/sign-up",
                    }
                  }
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsSize="large"
                    bsStyle="default"
                    disabled={false}
                  >
                     Register 
                  </Button>
                </Link>,
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsSize="large"
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  Login
                </Button>,
              ],
              "className": "pull-right",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsSize="large"
                    bsStyle="default"
                    disabled={false}
                  >
                     Register 
                  </Button>,
                  "replace": false,
                  "to": Object {
                    "pathname": "/sign-up",
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "active": false,
                    "block": false,
                    "bsClass": "btn",
                    "bsSize": "large",
                    "bsStyle": "default",
                    "children": " Register ",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": " Register ",
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": false,
                  "bsClass": "btn",
                  "bsSize": "large",
                  "bsStyle": "primary",
                  "children": "Login",
                  "disabled": true,
                  "type": "submit",
                },
                "ref": null,
                "rendered": "Login",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
